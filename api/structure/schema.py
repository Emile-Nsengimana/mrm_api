import graphene
from graphene_sqlalchemy import SQLAlchemyObjectType

from api.structure.models import Structure as StructureModel
from helpers.auth.authentication import Auth
from helpers.structure.create_structure import create_structure


class Structure(SQLAlchemyObjectType):
    """Autogenerated Return type for OfficeStructure"""

    class Meta:
        model = StructureModel


class StructureInputs(graphene.InputObjectType):
    structure_id = graphene.String(required=True)
    level = graphene.Int(required=True)
    name = graphene.String(required=True)
    parent_id = graphene.Int(required=True)
    tag = graphene.String(required=True)
    location_id = graphene.Int(required=True)
    position = graphene.String(required=True)


class CreateOfficeStructure(graphene.Mutation):
    """ Returns payload on office structure creation"""
    class Arguments:
        data = graphene.List(
            StructureInputs,
            required=True,
            description="Creates a new office structure with the arguments\
            \n- structure_id: The structure id for office structure[required]\
            \n- level: The level of the office structure[required]\
            \n- name: The name of the office structure[required]\
            \n- parent_id: The parent id of the office structure[required]\
            \n- tag: Tags for the office structure[required]\
            \n- location_id: The location id of the office structure[required]\
            \n- position: The position of the office structure[required]"
        )

    structure = graphene.List(Structure)

    @Auth.user_roles('Admin')
    def mutate(self, info, **kwargs):
        office_structure = []
        for each_structure in kwargs['data']:
            node = create_structure(**each_structure)
            office_structure.append(node)
        return CreateOfficeStructure(structure=office_structure)


class Mutation(graphene.ObjectType):
    create_office_structure = CreateOfficeStructure.Field()
